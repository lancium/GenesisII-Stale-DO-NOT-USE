	static private final long _DEFAULT_TIME_TO_LIVE = 1000L * 60 * 60;
	
	static private QName _FILENAME_QNAME =
        new QName(GenesisIIConstants.GENESISII_NS, "create-file-filename");
    static private QName _FILEPATH_QNAME =
        new QName(GenesisIIConstants.GENESISII_NS, "data-filepath");

	
	static private UserDataType createUserData(String filename, String filepath)
    {
        return new UserDataType(new MessageElement[] {
            new MessageElement(
                _FILENAME_QNAME, filename),
            new MessageElement(
                _FILEPATH_QNAME, filepath)
        });
    }
	
	@Override
	@RWXMapping(RWXCategory.EXECUTE)
	public CreateFileResponse createFile(CreateFile createFileRequest)
			throws RemoteException, RNSEntryExistsFaultType, RNSFaultType,
			ResourceUnknownFaultType, RNSEntryNotDirectoryFaultType
	{
		MessageElement []parameters = null;

        File filePath;

        try
        {
            File userDir = ConfigurationManager.getCurrentConfiguration().getUserDirectory();
            GuaranteedDirectory sbyteiodir = new GuaranteedDirectory(userDir, "sbyteio");
            filePath = File.createTempFile("sbyteio", ".dat", sbyteiodir);
        }
        catch (IOException ioe)
        {
            throw new ResourceException(ioe.getLocalizedMessage(), ioe);
        }

        Subscribe subscribeRequest = new Subscribe(new Token(
            WellknownTopics.SBYTEIO_INSTANCE_DYING),
            new UnsignedLong(_DEFAULT_TIME_TO_LIVE),
            (EndpointReferenceType)WorkingContext.getCurrentWorkingContext(
                ).getProperty(WorkingContext.EPR_PROPERTY_NAME),
            createUserData(createFileRequest.getFilename(),
                filePath.getAbsolutePath()));


        parameters = new MessageElement [] {
            new MessageElement(RByteIOResource.FILE_PATH_PROPERTY,
                filePath.getAbsolutePath()),
            new MessageElement(
                ByteIOConstants.SBYTEIO_SUBSCRIBE_CONSTRUCTION_PARAMETER,
                subscribeRequest),
            new MessageElement(
                ByteIOConstants.MUST_DESTROY_PROPERTY,
                Boolean.FALSE),
            new MessageElement(
            	ByteIOConstants.SBYTEIO_DESTROY_ON_CLOSE_FLAG,
            	Boolean.TRUE),
            ClientConstructionParameters.createTimeToLiveProperty(
                _DEFAULT_TIME_TO_LIVE)
        };

		/* ASG August 28,2008, replaced RPC with direct call to CreateEPR */
		EndpointReferenceType entryReference = 
			new StreamableByteIOServiceImpl().CreateEPR(parameters,
					Container.getServiceURL("StreamableByteIOPortType"));
        return new CreateFileResponse(entryReference);

        /*
        StreamableByteIOPortType sbyteio = ClientUtils.createProxy(
        	StreamableByteIOPortType.class, EPRUtils.makeEPR(
        		Container.getServiceURL("StreamableByteIOPortType")));
        VcgrCreateResponse resp = sbyteio.vcgrCreate(new VcgrCreate(parameters));
        return new CreateFileResponse(resp.getEndpoint());
         */
    }

    @Override
	@RWXMapping(RWXCategory.READ)
	public ListResponse list(List listRequest) throws RemoteException,
			RNSFaultType, ResourceUnknownFaultType,
			RNSEntryNotDirectoryFaultType
	{
		Collection<EntryType> response =
			new LinkedList<EntryType>();
		
		IBESResource resource = 
			(IBESResource)ResourceManager.getCurrentResource().dereference();
		
		try
		{
			String query = listRequest.getEntryName();
			for (BESActivity activity : resource.getContainedActivities())
			{
				String name = activity.getJobName();
				if (query == null || query.equals(name))
				{
					try
					{
						response.add(new EntryType(
							name, null, activity.getActivityEPR()));
					}
					catch (NoSuchActivityFault nsaf)
					{
						if (_logger.isDebugEnabled()) _logger.debug("We lost an activity between the " +
							"time we looked it up and the time we got " +
							"it's EPR.", nsaf);
					}
				}
			}
			
			return new ListResponse(response.toArray(new EntryType[0]));
		}
		catch (SQLException sqe)
		{
			throw new RemoteException("Unexpected BES exception.", sqe);
		}
	}
	
	@Override
	@RWXMapping(RWXCategory.OPEN)
	public void notify(Notify notify) throws RemoteException,
			ResourceUnknownFaultType
	{
		super.notify();
		
		try
		{
            String topic = notify.getTopic().toString();
            if (topic.equals(WellknownTopics.SBYTEIO_INSTANCE_DYING))
            {
                UserDataType userData = notify.getUserData();
                if (userData == null || (userData.get_any() == null) )
                    throw new RemoteException(
                        "Missing required user data for notification");
                MessageElement []data = userData.get_any();
                if (data.length != 2)
                    throw new RemoteException(
                        "Missing required user data for notification");
                String name = null;
                String filepath = null;

                for (MessageElement elem : data)
                {
                    QName elemName = elem.getQName();
                    if (elemName.equals(_FILENAME_QNAME))
                    {
                        name = elem.getValue();
                    } else if (elemName.equals(_FILEPATH_QNAME))
                    {
                        filepath = elem.getValue();
                    } else
                    {
                        throw new RemoteException(
                            "Unknown user data found in notification.");
                    }
                }

                if (name == null)
                    throw new ResourceException(
                        "Couldn't locate name parameter in UserData for notification.");
                if (filepath == null)
                    throw new ResourceException(
                        "Couldn't locate filepath parameter in UserData " +
                        "for notification.");

                if (!name.endsWith(".txt"))
                    name += ".txt";

                submitJob(name, filepath);
            }
        }
        catch (Throwable t)
        {
            _logger.warn(t.getLocalizedMessage(), t);
        }
	}
	
	private void submitJob(String jobName, String filepath)
		throws IOException
	{
		File file = new File(filepath);
		
		try
		{
			if (!submitJobTrySingle(jobName, file))
				submitJobTryMulti(jobName, file);
		}
		finally
		{
			file.delete();
		}
	}
	
	private boolean submitJobTrySingle(String jobName, File file)
		throws IOException
	{
		JobDefinition_Type jobDef = null;
		
		FileInputStream fin = null;
		
		try
		{
			fin = new FileInputStream(file);
			jobDef =
				(JobDefinition_Type)ObjectDeserializer.deserialize(
					new InputSource(fin), JobDefinition_Type.class);
			
			if (jobDef == null)
				return false;

			if (jobDef.getJobDescription() == null)
				return false;
			
			if (jobName != null)
			{
				JobIdentification_Type ident =
					jobDef.getJobDescription().getJobIdentification();
				if (ident != null)
				{
					ident.setJobName(jobName);
				} else
				{
					jobDef.getJobDescription().setJobIdentification(
						new JobIdentification_Type(jobName, null, null,
						null, null));
				}
			}
			
			createActivity(new CreateActivityType(new ActivityDocumentType(
				jobDef, null), null));
			return true;
		}
		catch (IOException ioe)
		{
			throw ioe;
		}
		catch (Throwable cause)
		{
			return false;
		}
		finally
		{
			StreamUtils.close(fin);
		}
	}
	
	private boolean submitJobTryMulti(String jobName, File file)
		throws IOException
	{
		JobDefinition_Type []jobDefs = null;
		
		FileInputStream fin = null;
		
		try
		{
			fin = new FileInputStream(file);
			jobDefs =
				((JobMultiDefinition_Type)ObjectDeserializer.deserialize(
					new InputSource(fin), JobMultiDefinition_Type.class)).getJobDefinition();
			
			if (jobDefs == null)
				return false;
			
			if (jobDefs.length == 0)
				return true;
			 
			if (jobName != null)
			{
				for (JobDefinition_Type jobDef : jobDefs)
				{
					JobIdentification_Type ident =
						jobDef.getJobDescription().getJobIdentification();
					if (ident != null)
					{
						ident.setJobName(jobName);
					} else
					{
						jobDef.getJobDescription().setJobIdentification(
							new JobIdentification_Type(jobName, null, null,
							null, null));
					}
				}
			}
			
			for (JobDefinition_Type jobDef : jobDefs)
			{
				createActivity(new CreateActivityType(new ActivityDocumentType(
					jobDef, null), null));
			}
			
			return true;
		}
		finally
		{
			StreamUtils.close(fin);
		}
	}

	@Override
	@RWXMapping(RWXCategory.READ)
	public QueryResponse query(Query queryRequest) throws RemoteException,
			RNSFaultType, ResourceUnknownFaultType
	{
		throw new RemoteException("Method \"query\" is not implemented.");
	}

	@Override
	@RWXMapping(RWXCategory.EXECUTE)
	public String[] remove(Remove removeRequest) throws RemoteException,
			RNSFaultType, ResourceUnknownFaultType,
			RNSDirectoryNotEmptyFaultType
	{
		Collection<String> response =
			new LinkedList<String>();
		
		IBESResource resource = 
			(IBESResource)ResourceManager.getCurrentResource().dereference();
		
		try
		{
			String query = removeRequest.getEntryName();
			for (BESActivity activity : resource.getContainedActivities())
			{
				String name = activity.getJobName();
				if (query == null || query.equals(name))
				{
					TerminateActivitiesResponseType tat;
					try
					{
						tat = terminateActivities(new TerminateActivitiesType(
							new EndpointReferenceType[] { 
								activity.getActivityEPR() }, null));
						if (tat.getResponse(0).getFault() == null)
							response.add(name);
						else
							_logger.error("Unable to remove activity \"" + 
								name + "\":  " + tat.getResponse(0).getFault());
					}
					catch (NoSuchActivityFault nsaf)
					{
						if (_logger.isDebugEnabled()) _logger.debug("We lost an activity between the time " +
							"we looked it up and when we asked for it's EPR.", 
							nsaf);
					}
				}
			}
			
			return response.toArray(new String[0]);
		}
		catch (SQLException sqe)
		{
			throw new RemoteException("Unexpected BES exception.", sqe);
		}
	}
	
	