package edu.virginia.vcgr.genii.client.security.authz.acl;

import java.io.*;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.axis.message.MessageElement;

import edu.virginia.vcgr.genii.client.security.authz.*;
import edu.virginia.vcgr.genii.client.ser.DBSerializer;
import edu.virginia.vcgr.genii.common.security.*;

/**
 * An access-control policy data-structure comprised of policy-sets.  
 * Conveys sets of policies for three types of access: "read", write", 
 * and "execute".  
 * 
 * Additionally conveys a flag indicating a confidentiality requirement for 
 * secure communication.  
 * 
 * @author dgm4d
 * 
 */
public class Acl implements Serializable
{

	static final long serialVersionUID = 0L;

	public boolean requireEncryption = false;
	public Collection<AclEntry> readAcl = new ArrayList<AclEntry>();
	public Collection<AclEntry> writeAcl = new ArrayList<AclEntry>();
	public Collection<AclEntry> executeAcl = new ArrayList<AclEntry>();

	public Acl()
	{
	}

	@Override
	public Object clone()
	{
		Acl ret = new Acl();

		ret.requireEncryption = requireEncryption;

		ret.readAcl = new ArrayList<AclEntry>(readAcl);
		ret.writeAcl = new ArrayList<AclEntry>(writeAcl);
		ret.executeAcl = new ArrayList<AclEntry>(executeAcl);

		return ret;
	}

	/**
	 * Utility method for decoding sets of AclEntries conveyed within
	 * the AclEntryListType generated by WSDL2Java.
	 * 
	 * @param identityList
	 * @return
	 * @throws AuthZSecurityException
	 */
	static private Collection<AclEntry> decodeIdentityList(
			AclEntryListType identityList) throws AuthZSecurityException
	{

		ArrayList<AclEntry> retval = new ArrayList<AclEntry>();
		if (identityList == null)
			return retval;

		try
		{
			byte[][] identities = identityList.getIdentity();
			
			for (int i = 0; i < identities.length; i++) 
			{
				byte[] identity = identities[i];
				AclEntry entry = (AclEntry) DBSerializer.deserialize(identity);
				retval.add(entry);
			}
		} 
		catch (Exception e)
		{
			throw new AuthZSecurityException(
					"Unable to decode AuthZ config.", e);
		}

		return retval;

	}

	/**
	 * Utility method for encoding sets of AclEntries conveyed within
	 * the AclEntryListType generated by WSDL2Java.
	 * 
	 * @param acl
	 * @return
	 * @throws AuthZSecurityException
	 */
	static private AclEntryListType encodeIdentityList(
			Collection<AclEntry> acl) throws AuthZSecurityException
	{

		try
		{
			byte[][] identities = new byte[acl.size()][];

			int i = 0;
			for (AclEntry entry : acl) {
				identities[i] = DBSerializer.serialize(entry, -1);
				i++;
			}

			return new AclEntryListType(identities.length, identities);
			
		} catch (Exception e)
		{
			throw new AuthZSecurityException(
					"Unable to encode AuthZ config.", e);
		}
	}

	/**
	 * Utility method for decoding an ACL instance from the
	 * the AuthZConfig type generated by WSDL2Java.
	 * 
	 * @param config
	 * @return
	 * @throws AuthZSecurityException
	 */
	static public Acl decodeAcl(AuthZConfig config)
			throws AuthZSecurityException
	{

		try
		{
			MessageElement aclMel = null;
			MessageElement[] anys = config.get_any();
			if (anys == null)
			{
				return null;
			}
			for (MessageElement mel : anys)
			{

				if (mel.getQName().equals(
						AclType.getTypeDesc().getXmlType()))
				{

					if (aclMel != null)
					{
						// we already found one
						throw new AuthZSecurityException(
								"Invalid GAML AuthZ config");
					}

					aclMel = mel;
				}
			}

			if (aclMel == null)
			{
				throw new AuthZSecurityException("Invalid GAML AuthZ config");
			}

			AclType gacl = (AclType) aclMel
					.getObjectValue(AclType.class);

			Acl retval = new Acl();
			if (gacl.getRequireEncryption() != null)
			{
				retval.requireEncryption = gacl.getRequireEncryption()
						.booleanValue();
			}

			if (gacl.getReadAcl() != null)
			{
				retval.readAcl = decodeIdentityList(gacl.getReadAcl());
			}
			if (gacl.getWriteAcl() != null)
			{
				retval.writeAcl = decodeIdentityList(gacl.getWriteAcl());
			}
			if (gacl.getExecuteAcl() != null)
			{
				retval.executeAcl = decodeIdentityList(gacl.getExecuteAcl());
			}

			return retval;

		} catch (Exception e)
		{
			throw new AuthZSecurityException(
					"Unable to load GAML AuthZ config.", e);
		}
	}

	/**
	 * Utility method for encoding an ACL instance from the
	 * the AuthZConfig type generated by WSDL2Java.
	 * 
	 * @param acl
	 * @return
	 * @throws AuthZSecurityException
	 */
	static public AuthZConfig encodeAcl(Acl acl) throws AuthZSecurityException
	{

		AclType gacl = new AclType();
		gacl.setRequireEncryption(new Boolean(acl.requireEncryption));
		gacl.setReadAcl(encodeIdentityList(acl.readAcl));
		gacl.setWriteAcl(encodeIdentityList(acl.writeAcl));
		gacl.setExecuteAcl(encodeIdentityList(acl.executeAcl));

		MessageElement mel[] = { new MessageElement(AclType.getTypeDesc()
				.getXmlType(), gacl) };
		return new AuthZConfig(mel);
	}
}
