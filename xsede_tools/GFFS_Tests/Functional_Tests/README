NAME:	gffsGridCommands.sh

DESCRIPTION:	This is the main script that runs collection of tests for basic grid command line commands

INPUT: 	N/A

OUTPUT:	Output from running the commands

USAGE/EXAMPLE: ./gffsGridCommands.sh

LIMITATIONS:  Should have properly set all the environment variables in inputfile.txt. The CONTAINERPATH in inputfile.txt should
	be acceesible to the test user upto the Service and all portTypes in service Dir.

------------------------------------------------------------------------------------------------------------

NAME:	gridCmdLine.xml

DESCRIPTION:	XScript tests all the basic grid data-commands.

INPUT:	1- Valid grid RNSPATH where user has read/write permissions 2- Mountpoint on local FS 

OUTPUT:	Output generated from the grid commands

USAGE/EXAMPLE: $GENII_INSTALL_DIR/grid script local:./gridCmdLine.xml RNSPATH <local-mount-point>

LIMITATIONS: Local mount point directory should be created before running the script, RNSPATH should be accessible 
	     for read/write operations

------------------------------------------------------------------------------------------------------------

NAME:	rnsTest.xml

DESCRIPTION:	This XScript check RNS creation 

INPUT: 	Valid grid RNSPATH where user has read/write permissions

OUTPUT:	Output generated from the grid commands

USAGE/EXAMPLE:	 $GENII_INSTALL_DIR/grid script local:./rnsTest.xml RNSPATH

LIMITATIONS:

------------------------------------------------------------------------------------------------------------

NAME:	randomByteIO.xml

DESCRIPTION:	This XScript check RandomByteIO creation

INPUT:	Valid grid RNSPATH where user has read/write permissions

OUTPUT:	 Output generated from the grid commands

USAGE/EXAMPLE:	$GENII_INSTALL_DIR/grid script local:./randomByteIO.xml RNSPATH

LIMITATIONS:	Should run ./rnsTest.xml before this script

------------------------------------------------------------------------------------------------------------

NAME: 	gffsFuseCommands.sh (runs independent of gffsGridCommands.sh)

DESCRIPTION:	This script tests the basic file system commands on Fuse mounted directory

INPUT:	N/A

OUTPUT: Output generated from the commands

USAGE/EXAMPLE: ./gffsFuseCommands.sh

LIMITATIONS: Commands run on Fuse mounted might throw exception "Exception in thread 
	    "main" edu.virginia.vcgr.genii.client.fuse.exceptions.FuseNoSuchEntryException: Unable to flush target."

------------------------------------------------------------------------------------------------------------

NAME: 	gffsFileOpsTest.sh (runs independent of gffsGridCommands.sh)

DESCRIPTION: This scripts runs gffs_file_ops_test.c, C program with IO related operations

INPUT: N/A

OUTPUT: Output generated by gffs_file_ops_test.c

USAGE/EXAMPLE: ./gffsFileOpsTest.sh

LIMITATIONS: Grid GFFS must be mounted and available in current dir

------------------------------------------------------------------------------------------------------------

NAME: 	rnsBearTrap.sh (runs independent of gffsGridCommands.sh)

DESCRIPTION: This script exercises several operations for RNS, such as recursive copies and deletions in the presence of grid links and file system links.

INPUT: N/A

OUTPUT: Output generated by the tests

USAGE/EXAMPLE: bash ./rnsBearTrap.sh

LIMITATIONS: GFFS must be enabled, only does fs links on unix & linux, requires newer recursive copy support.

------------------------------------------------------------------------------------------------------------

NAME: 	gffsReplCommands.sh

DESCRIPTION: This script tests out the replication features in GenesisII.  It requires two containers to operate.

INPUT: N/A

OUTPUT: Output generated by the tests

USAGE/EXAMPLE: bash ./gffsReplCommands.sh

LIMITATIONS: GFFS must be enabled.  Requires BACKUP_DEPLOYMENT_NAME, BACKUP_PORT_NUMBER, BACKUP_CONTAINER, and BACKUP_USER_DIR variables to be defined in inputfile.txt.


