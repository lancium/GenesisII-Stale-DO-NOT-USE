package edu.virginia.vcgr.genii.client.security.axis;

import java.util.ArrayList;
import java.util.List;

import org.apache.axis.message.MessageElement;

import edu.virginia.vcgr.genii.client.ser.DBSerializer;
import edu.virginia.vcgr.genii.common.security.AclEntryListType;
import edu.virginia.vcgr.genii.common.security.AclType;
import edu.virginia.vcgr.genii.common.security.AuthZConfig;
import edu.virginia.vcgr.genii.security.acl.Acl;
import edu.virginia.vcgr.genii.security.acl.AclEntry;

/**
 * helper methods for encoding and decoding Acls to and from axis
 * MessageElements.
 */
public class AxisAcl {
	/**
	 * Utility method for decoding sets of AclEntries conveyed within the
	 * AclEntryListType generated by WSDL2Java.
	 * 
	 * @param identityList
	 * @return
	 * @throws AuthZSecurityException
	 */
	static public List<AclEntry> decodeIdentityList(
			AclEntryListType identityList) throws AuthZSecurityException {
		ArrayList<AclEntry> retval = new ArrayList<AclEntry>();
		if (identityList == null)
			return retval;

		try {
			byte[][] identities = identityList.getIdentity();

			for (int i = 0; i < identities.length; i++) {
				byte[] identity = identities[i];
				AclEntry entry = (AclEntry) DBSerializer.deserialize(identity);
				retval.add(entry);
			}
		} catch (Exception e) {
			throw new AuthZSecurityException("Unable to decode AuthZ config.",
					e);
		}

		return retval;

	}

	/**
	 * Utility method for encoding sets of AclEntries conveyed within the
	 * AclEntryListType generated by WSDL2Java.
	 * 
	 * @param acl
	 * @return
	 * @throws AuthZSecurityException
	 */
	static public AclEntryListType encodeIdentityList(List<AclEntry> acl,
			boolean sanitize) throws AuthZSecurityException {
		try {
			byte[][] identities = new byte[acl.size()][];
			int i = 0;
			for (AclEntry entry : acl) {
				if (entry == null || !sanitize)
					identities[i] = DBSerializer.serialize(entry, -1);
				else
					identities[i] = DBSerializer
							.serialize(entry.sanitize(), -1);

				i++;
			}

			return new AclEntryListType(identities.length, identities);

		} catch (Exception e) {
			throw new AuthZSecurityException("Unable to encode AuthZ config.",
					e);
		}
	}

	/**
	 * Utility method for decoding an ACL instance from the the AuthZConfig type
	 * generated by WSDL2Java.
	 * 
	 * @param config
	 * @return
	 * @throws AuthZSecurityException
	 */
	static public Acl decodeAcl(AuthZConfig config)
			throws AuthZSecurityException {
		try {
			MessageElement aclMel = null;
			MessageElement[] anys = config.get_any();
			if (anys == null) {
				return null;
			}
			for (MessageElement mel : anys) {

				if (mel.getQName().equals(AclType.getTypeDesc().getXmlType())) {

					if (aclMel != null) {
						// we already found one
						throw new AuthZSecurityException("Invalid AuthZ config");
					}

					aclMel = mel;
				}
			}

			if (aclMel == null) {
				throw new AuthZSecurityException("Invalid AuthZ config");
			}

			AclType gacl = (AclType) aclMel.getObjectValue(AclType.class);

			Acl retval = new Acl();
			if (gacl.getRequireEncryption() != null) {
				retval.requireEncryption = gacl.getRequireEncryption()
						.booleanValue();
			}

			if (gacl.getReadAcl() != null) {
				retval.readAcl = AxisAcl.decodeIdentityList(gacl.getReadAcl());
			}
			if (gacl.getWriteAcl() != null) {
				retval.writeAcl = AxisAcl
						.decodeIdentityList(gacl.getWriteAcl());
			}
			if (gacl.getExecuteAcl() != null) {
				retval.executeAcl = AxisAcl.decodeIdentityList(gacl
						.getExecuteAcl());
			}

			return retval;

		} catch (Exception e) {
			throw new AuthZSecurityException("Unable to load AuthZ config.", e);
		}
	}

	/**
	 * Utility method for encoding an ACL instance from the the AuthZConfig type
	 * generated by WSDL2Java.
	 * 
	 * @param acl
	 * @return
	 * @throws AuthZSecurityException
	 */
	static public AuthZConfig encodeAcl(Acl acl, boolean sanitize)
			throws AuthZSecurityException {
		AclType gacl = new AclType();
		gacl.setRequireEncryption(new Boolean(acl.requireEncryption));
		gacl.setReadAcl(AxisAcl.encodeIdentityList(acl.readAcl, sanitize));
		gacl.setWriteAcl(AxisAcl.encodeIdentityList(acl.writeAcl, sanitize));
		gacl.setExecuteAcl(AxisAcl.encodeIdentityList(acl.executeAcl, sanitize));

		MessageElement mel[] = { new MessageElement(AclType.getTypeDesc()
				.getXmlType(), gacl) };
		return new AuthZConfig(mel);
	}

	static public AuthZConfig encodeAcl(Acl acl) throws AuthZSecurityException {
		return encodeAcl(acl, false);
	}

	/**
	 * Modify this ACL object. Add or remove permissions (specified by
	 * modeString) to the given entry.
	 * 
	 * Obviously, modifying this ACL object does not save the changes in the
	 * metadata of any local or remote resource.
	 */
	static public void chmod(Acl toChange, String modeString, AclEntry entry)
			throws AuthZSecurityException {
		AclAuthZClientTool.chmod(toChange, modeString, entry);
	}
}
